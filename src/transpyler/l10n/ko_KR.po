#
msgid ""
msgstr ""
"Project-Id-Version: 1.0\n"
"Report-Msgid-Bugs-To: fabiomacedomendes@gmail.com\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.0.2\n"
"Last-Translator: FÃ¡bio Mendes <fabiomacedomendes@gmail.com>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Language: ko_KR\n"

#. range.name
msgid "range"
msgstr ""

#. range.doc
msgid ""
"range(stop) -> range object\n"
"range(start, stop[, step]) -> range object\n"
"\n"
"Return an object that produces a sequence of integers from start "
"(inclusive)\n"
"to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\n"
"start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\n"
"These are exactly the valid indices for a list of 4 elements.\n"
"When step is given, it specifies the increment (or decrement)."
msgstr ""

#. range.args
#. concatenate.args
msgid "args"
msgstr ""

#. sleep.name
msgid "sleep"
msgstr ""

#. sleep.doc
msgid ""
"Delay execution for a given number of seconds.\n"
"\n"
"The argument may be a floating point number for subsecond precision."
msgstr ""

#. sleep.args
msgid "seconds"
msgstr ""

#. exit.name
msgid "exit"
msgstr ""

#. exit.doc
msgid ""
"Finish program execution and provides an exit code.\n"
"\n"
"If msg is not given, the program finishes in a successful state. An\n"
"exit code different from zero or a string tells that there were an error\n"
"during execution."
msgstr ""

#. exit.args
msgid "msg"
msgstr ""

#. integer.name
msgid "integer"
msgstr ""

#. integer.doc
msgid "Converts argument to an integer."
msgstr ""

#. integer.args
#. real.args
#. complex.args
#. boolean.args
#. binary.args
#. octal.args
#. hexadecimal.args
#. character.args
#. sqrt.args
#. exp.args
#. log.args
#. ln.args
#. log10.args
#. log2.args
#. sign.args
#. abs.args
#. Vec:x
msgid "x"
msgstr ""

#. real.name
#. Real:real
msgid "real"
msgstr ""

#. real.doc
msgid "Convert argument to a real number (number with decimal places)."
msgstr ""

#. complex.name
msgid "complex"
msgstr ""

#. complex.doc
msgid "Convert argument to a complex number."
msgstr ""

#. boolean.name
msgid "boolean"
msgstr ""

#. boolean.doc
msgid ""
"Convert argument to a boolean value.\n"
"\n"
"Zero and empty sequences are converted to False. All other values are True."
msgstr ""

#. binary.name
msgid "binary"
msgstr ""

#. binary.doc
msgid "Convert integer to a string with its binary representation."
msgstr ""

#. octal.name
msgid "octal"
msgstr ""

#. octal.doc
msgid "Convert integer to a string with its octal representation."
msgstr ""

#. hexadecimal.name
msgid "hexadecimal"
msgstr ""

#. hexadecimal.doc
msgid "Convert integer to a string with its hexadecimal representation"
msgstr ""

#. character.name
msgid "character"
msgstr ""

#. character.doc
msgid ""
"Convert number to its corresponding character in the ASCII/Unicode tables."
msgstr ""

#. concatenate.name
msgid "concatenate"
msgstr ""

#. concatenate.doc
msgid ""
"Convert argument to string and concatenate.\n"
"\n"
"If only one argument is passed, assumes it is a sequence.\n"
"\n"
"Examples:\n"
"    >>> concatenate('x = ', 2)\n"
"    'x = 2'\n"
"    >>> concatenate([1, 2, 3, 4])\n"
"    '1234'"
msgstr ""

#. join.name
msgid "join"
msgstr ""

#. join.doc
msgid ""
"Similar to concatenate(), but takes an extra separator as first argument\n"
"argument.\n"
"\n"
"Examples:\n"
"    >>> join(', ', 1, 2, 3)\n"
"    '1, 2, 3'"
msgstr ""

#. join.args
msgid "separator, args"
msgstr ""

#. format_string.name
msgid "format_string"
msgstr ""

#. format_string.doc
msgid ""
"Format text inserting parameters in the wildcard positions.\n"
"\n"
"There are two different syntax for string formatting. The first is based\n"
"on C and uses symbols such as %s, %f, %d to delimit insertion points.\n"
"\n"
">>> format_string('%i != %.2f', 42, 43)\n"
"'42 != 43.00'\n"
"\n"
"The second uses curly braces.\n"
"\n"
">>> format_string('{0} != {1}', 42, 43)\n"
"'42 != 43'"
msgstr ""

#. format_string.args
msgid "string, args, kwargs"
msgstr ""

#. print.name
msgid "print"
msgstr ""

#. print.doc
msgid ""
"Prints the object or text provided on the screen.\n"
"\n"
"If called with multiple arguments, prints them in sequence, separating\n"
"them with a white space.\n"
"\n"
"Examples:\n"
"    >>> print(\"Hello world!\")\n"
"    Hello World!"
msgstr ""

#. print.args
#. alert.args
#. min.args
#. max.args
msgid "args, kwargs"
msgstr ""

#. alert.name
msgid "alert"
msgstr ""

#. alert.doc
msgid ""
"Similar to the `show` function, but displays the resulting message in a\n"
"dialog box."
msgstr ""

#. print_formatted.name
msgid "print_formatted"
msgstr ""

#. print_formatted.doc
msgid "Displays a string after applying the provided formatting arguments."
msgstr ""

#. print_formatted.args
msgid "text, args, kwargs"
msgstr ""

#. read_text.name
msgid "read_text"
msgstr ""

#. read_text.doc
msgid ""
"Prompts the user for a text entry.\n"
"\n"
"Examples:\n"
"    >>> name = read_text('Your name:')\n"
"    >>> show(\"Hello,\" + name)  # the user types \"Maria\"\n"
"    Hello Maria"
msgstr ""

#. read_text.args
msgid "message"
msgstr ""

#. read_number.name
msgid "read_number"
msgstr ""

#. read_number.doc
msgid ""
"Prompts the user for a numeric entry.\n"
"\n"
"Examples:\n"
"    >>> x = read_number('A number:')  # user types 2...\n"
"    >>> x + 40\n"
"    42"
msgstr ""

#. read_number.args
msgid "message, text, num"
msgstr ""

#. read_file.name
msgid "read_file"
msgstr ""

#. read_file.doc
msgid ""
"Reads the content from a text file and returns it as string.\n"
"\n"
"Examples:\n"
"    >>> data = read_file(\"foo.txt\")"
msgstr ""

#. read_file.args
msgid "file"
msgstr ""

#. save_in_file.name
msgid "save_in_file"
msgstr ""

#. save_in_file.doc
msgid ""
"Saves the text content to the indicated file, deleting any previous "
"content.\n"
"\n"
"WARNING! If the given file exists, this function will overwrite your\n"
"content without asking!\n"
"\n"
"Examples:\n"
"    >>> save_in_file(data, \"foo.txt\")"
msgstr ""

#. save_in_file.args
msgid "text, file, F"
msgstr ""

#. pause.name
msgid "pause"
msgstr ""

#. pause.doc
msgid "Stops execution until the user presses the <return> key."
msgstr ""

#. Number.name
msgid "Number"
msgstr ""

#. Number.doc
msgid ""
"All numbers inherit from this class.\n"
"\n"
"If you just want to check if an argument x is a number, without\n"
"caring what kind, use isinstance(x, Number)."
msgstr ""

#. Real.name
msgid "Real"
msgstr ""

#. Real.doc
msgid ""
"To Complex, Real adds the operations that work on real numbers.\n"
"\n"
"In short, those are: a conversion to float, trunc(), divmod,\n"
"%, <, <=, >, and >=.\n"
"\n"
"Real also provides defaults for the derived operations."
msgstr ""

#. Real:conjugate.name
msgid "conjugate"
msgstr ""

#. Real:conjugate.doc
msgid "Conjugate is a no-op for Reals."
msgstr ""

#. Real:conjugate.args
#. Vec:norm.args
#. Vec:normalized.args
msgid "self"
msgstr ""

#. Real:imag
msgid "imag"
msgstr ""

#. pi.doc
#. e.doc
msgid ""
"float(x) -> floating point number\n"
"\n"
"Convert a string or number to a floating point number, if possible."
msgstr ""

#. cos.name
msgid "cos"
msgstr ""

#. cos.doc
msgid "Cosine of an angle (in degrees)"
msgstr ""

#. cos.args
#. sin.args
#. tan.args
msgid "angle"
msgstr ""

#. sin.name
msgid "sin"
msgstr ""

#. sin.doc
msgid "Sine of an angle (in degrees)"
msgstr ""

#. tan.name
msgid "tan"
msgstr ""

#. tan.doc
msgid "Tangent of an angle (in degrees)"
msgstr ""

#. sqrt.name
msgid "sqrt"
msgstr ""

#. sqrt.doc
msgid "Return the square root of a positive number."
msgstr ""

#. exp.name
msgid "exp"
msgstr ""

#. exp.doc
msgid "Return the exponential of a number."
msgstr ""

#. log.name
#. ln.name
msgid "log"
msgstr ""

#. log.doc
#. ln.doc
msgid ""
"Return the natural logarithm of x.\n"
"\n"
"Aliases: log | ln"
msgstr ""

#. log10.name
msgid "log10"
msgstr ""

#. log10.doc
msgid "Return the logarithm of x in base 10."
msgstr ""

#. log2.name
msgid "log2"
msgstr ""

#. log2.doc
msgid "Return the logarithm of x in base 2."
msgstr ""

#. sign.name
msgid "sign"
msgstr ""

#. sign.doc
msgid ""
"Return 1 if x is positive, -1 if it is negative and 0 if it is null.\n"
"\n"
"Examples:\n"
"    >>> sign(-32.0)\n"
"    -1"
msgstr ""

#. abs.name
msgid "abs"
msgstr ""

#. abs.doc
msgid "Return the absolute value of the argument."
msgstr ""

#. round.name
msgid "round"
msgstr ""

#. round.doc
msgid ""
"Round a number to a given precision in decimal digits (default 0 digits).\n"
"ndigits may be negative.\n"
"\n"
"Examples:\n"
"    >>> round(1.9)\n"
"    2\n"
"    >>> round(3.141516, 2)\n"
"    3.14"
msgstr ""

#. round.args
msgid "number, ndigits"
msgstr ""

#. ceil.name
msgid "ceil"
msgstr ""

#. ceil.doc
msgid ""
"Return the ceiling of x as an Integral.\n"
"This is the smallest integer >= x."
msgstr ""

#. ceil.args
#. trunc.args
msgid "number"
msgstr ""

#. trunc.name
msgid "trunc"
msgstr ""

#. trunc.doc
msgid "Truncates x to the nearest Integral toward 0."
msgstr ""

#. sum.name
msgid "sum"
msgstr ""

#. sum.doc
msgid "Return the sum of all numbers in the sequence."
msgstr ""

#. sum.args
msgid "seq, start"
msgstr ""

#. product.name
msgid "product"
msgstr ""

#. product.doc
msgid "Return the product of all numbers in the sequence."
msgstr ""

#. product.args
msgid "seq, start, result, x"
msgstr ""

#. min.name
msgid "min"
msgstr ""

#. min.doc
msgid ""
"Return the minimum value in the arguments.\n"
"\n"
"It called with a single sequence, return the minimum value on that sequence."
msgstr ""

#. max.name
msgid "max"
msgstr ""

#. max.doc
msgid ""
"Return the maximum value in the arguments.\n"
"\n"
"It called with a single sequence, return the maximum value on that sequence."
msgstr ""

#. dice.name
msgid "dice"
msgstr ""

#. dice.doc
msgid ""
"Simulate a dice trow (return a random number between 1 and 6.\n"
"\n"
"Call with an explicit argument to throw a dice with a different number of\n"
"faces\n"
"\n"
"Examples:\n"
"    >>> dice(20)                                            # doctest: "
"+SKIP\n"
"    13"
msgstr ""

#. dice.args
msgid "n"
msgstr ""

#. random.name
msgid "random"
msgstr ""

#. random.doc
msgid "Return a random number between 0 and 1."
msgstr ""

#. randint.name
msgid "randint"
msgstr ""

#. randint.doc
msgid "Return a random integer between a and b (inclusive)."
msgstr ""

#. randint.args
msgid "a, b"
msgstr ""

#. Vec.name
msgid "Vec"
msgstr ""

#. Vec.doc
msgid ""
"A tuple-based 2D vector.\n"
"\n"
"Supports all basic arithmetic operations."
msgstr ""

#. Vec:count
msgid "count"
msgstr ""

#. Vec:from_angle
msgid "from_angle"
msgstr ""

#. Vec:index
msgid "index"
msgstr ""

#. Vec:norm.name
msgid "norm"
msgstr ""

#. Vec:norm.doc
msgid "Vector norm."
msgstr ""

#. Vec:normalized.name
msgid "normalized"
msgstr ""

#. Vec:normalized.doc
msgid "Return unity vector."
msgstr ""

#. Vec:perp.name
msgid "perp"
msgstr ""

#. Vec:perp.doc
msgid "Returns a perpendicular vector rotated 90 degrees counter-clockwise."
msgstr ""

#. Vec:perp.args
msgid "self, invert"
msgstr ""

#. Vec:rotate.name
msgid "rotate"
msgstr ""

#. Vec:rotate.doc
msgid "Return rotated vector by the given angle."
msgstr ""

#. Vec:rotate.args
msgid "self, angle, x, y, c, s"
msgstr ""

#. Vec:y
msgid "y"
msgstr ""

#. vec.name
msgid "vec"
msgstr ""

#. vec.doc
msgid "Return a vector with the given (x, y) components."
msgstr ""

#. vec.args
msgid "x, y"
msgstr ""

#. dot.name
msgid "dot"
msgstr ""

#. dot.doc
msgid "The dot product (scalar product) of two vectors."
msgstr ""

#. dot.args
msgid "u, v"
msgstr ""

#. exiter.name
msgid "quit"
msgstr ""

#. exiter.doc
msgid "Type quit() to leave."
msgstr ""

#. cls.name
msgid "cls"
msgstr ""

#. cls.doc
msgid "Clear screen"
msgstr ""
