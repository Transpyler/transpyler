#
msgid ""
msgstr ""
"Project-Id-Version: 1.0\n"
"Report-Msgid-Bugs-To: fabiomacedomendes@gmail.com\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: Fábio Mendes <fabiomacedomendes@gmail.com>\n"
"Language-Team: \n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 2.0.1\n"

#. concatenate.name
#, fuzzy
msgid "concatenate"
msgstr "concatenar"

#. concatenate.doc
#, fuzzy
msgid ""
"Convert argument to string and concatenate.\n"
"\n"
"If only one argument is passed, assumes it is a sequence.\n"
"\n"
"Examples:\n"
"    >>> concatenate('x = ', 2)\n"
"    'x = 2'\n"
"    >>> concatenate([1, 2, 3, 4])\n"
"    '1234'"
msgstr ""
"Convierta el argumento en cadena y concatene.\n"
"\n"
"Si sólo se pasa un argumento, se supone que es una secuencia.\n"
"\n"
"Ejemplos:\n"
"    >>> concatenar ('x =', 2)\n"
"    'X = 2'\n"
"    >>> concatenar ([1, 2, 3, 4])\n"
"    '1234'"

#. concatenate.args
#. show.args
#. alert.args
#, fuzzy
msgid "args"
msgstr "Args"

#. join.name
#. String:join
#, fuzzy
msgid "join"
msgstr "unirse"

#. join.doc
#, fuzzy
msgid ""
"Similar to concatenate(), but takes an extra separator as first argument\n"
"argument.\n"
"\n"
"Examples:\n"
"    >>> join(', ', 1, 2, 3)\n"
"    '1, 2, 3'"
msgstr ""
"Similar a concatenate (), pero toma un separador extra como argumento del primer argumento.\n"
"\n"
"Ejemplos:\n"
"    >>> join (',', 1, 2, 3)\n"
"    '1, 2, 3'"

#. join.args
#, fuzzy
msgid "separator, args"
msgstr "Separador args"

#. format_string.name
#, fuzzy
msgid "format_string"
msgstr "Cadena_de_formato"

#. format_string.doc
#, fuzzy
msgid ""
"Format text inserting parameters in the wildcard positions.\n"
"\n"
"There are two different syntax for string formatting. The first is based\n"
"on C and uses symbols such as %s, %f, %d to delimit insertion points.\n"
"\n"
">>> format_string('%i != %.2f', 42, 43)\n"
"'42 != 43.00'\n"
"\n"
"The second uses curly braces.\n"
"\n"
">>> format_string('{0} != {1}', 42, 43)\n"
"'42 != 43'"
msgstr ""
"Formatear texto insertando parámetros en las posiciones de comodín.\n"
"\n"
"Hay dos sintaxis diferente para el formato de cadena. El primero se basa en C y utiliza símbolos como% s,% f,% d para delimitar puntos de inserción.\n"
"\n"
">>> format_string ('% i! =% .2f', 42, 43) '42! = 43.00 '\n"
"\n"
"El segundo utiliza llaves.\n"
"\n"
">>> format_string ('{0}! = {1}', 42, 43) '42! = 43 '"

#. format_string.args
#, fuzzy
msgid "string, args, kwargs"
msgstr "Cadena, args, kwargs"

#. show.name
#, fuzzy
msgid "show"
msgstr "espectáculo"

#. show.doc
#, fuzzy
msgid ""
"Shows the object or text provided on the screen.\n"
"\n"
"If called with multiple arguments, prints them in sequence, separating\n"
"them with a white space.\n"
"\n"
"Examples:\n"
"    >>> show(\"Hello world!\")\n"
"    Hello World!"
msgstr ""
"Muestra el objeto o texto proporcionado en la pantalla.\n"
"\n"
"Si se llama con varios argumentos, los imprime en secuencia, separándolos con un espacio en blanco.\n"
"\n"
"Ejemplos:\n"
"    >>> show (\"¡Hola mundo!\")\n"
"    Hola Mundo!"

#. alert.name
#, fuzzy
msgid "alert"
msgstr "alerta"

#. alert.doc
#, fuzzy
msgid ""
"Similar to the `show` function, but displays the resulting message in a\n"
"dialog box."
msgstr ""
"Similar a la función `show`, pero muestra el mensaje resultante en un cuadro"
" de diálogo."

#. fshow.name
#, fuzzy
msgid "fshow"
msgstr "Fshow"

#. fshow.doc
#, fuzzy
msgid "Displays a string after applying the provided formatting arguments."
msgstr ""
"Muestra una cadena después de aplicar los argumentos de formato "
"proporcionados."

#. fshow.args
#, fuzzy
msgid "text, args, kwargs"
msgstr "Texto, args, kwargs"

#. read_text.name
#, fuzzy
msgid "read_text"
msgstr "Leer_texto"

#. read_text.doc
#, fuzzy
msgid ""
"Prompts the user for a text entry.\n"
"\n"
"Examples:\n"
"    >>> name = read_text('Your name:')\n"
"    >>> show(\"Hello,\" + name)  # the user types \"Maria\"\n"
"    Hello Maria"
msgstr ""
"Solicita al usuario una entrada de texto.\n"
"\n"
"Ejemplos:\n"
"    >>> name = read_text ('Tu nombre:')\n"
"    >>> show (\"Hola,\" + nombre) # el usuario escribe \"Maria\"\n"
"    Hola Maria"

#. read_text.args
#, fuzzy
msgid "message"
msgstr "mensaje"

#. read_number.name
#, fuzzy
msgid "read_number"
msgstr "Leer_número"

#. read_number.doc
#, fuzzy
msgid ""
"Prompts the user for a numeric entry.\n"
"\n"
"Examples:\n"
"    >>> x = read_number('A number:')  # user types 2...\n"
"    >>> x + 40\n"
"    42"
msgstr ""
"Solicita al usuario una entrada numérica.\n"
"\n"
"Ejemplos:\n"
"    >>> x = read_number ('A number:') # tipos de usuario 2 ...\n"
"    X mas 40\n"
"    42"

#. read_number.args
#, fuzzy
msgid "message, text, num"
msgstr "Mensaje, texto, num"

#. read_file.name
#, fuzzy
msgid "read_file"
msgstr "Lee_el_archivo"

#. read_file.doc
#, fuzzy
msgid ""
"Reads the content from a text file and returns it as string.\n"
"\n"
"Examples:\n"
"    >>> data = read_file(\"foo.txt\")"
msgstr ""
"Lee el contenido de un archivo de texto y lo devuelve como cadena.\n"
"\n"
"Ejemplos:\n"
"    >>> data = read_file (\"foo.txt\")"

#. read_file.args
#, fuzzy
msgid "file"
msgstr "archivo"

#. save_in_file.name
#, fuzzy
msgid "save_in_file"
msgstr "Guardar_en_archivo"

#. save_in_file.doc
#, fuzzy
msgid ""
"Saves the text content to the indicated file, deleting any previous content.\n"
"\n"
"WARNING! If the given file exists, this function will overwrite your\n"
"content without asking!\n"
"\n"
"Examples:\n"
"    >>> save_in_file(data, \"foo.txt\")"
msgstr ""
"Guarda el contenido del texto en el archivo indicado, eliminando cualquier contenido anterior.\n"
"\n"
"¡ADVERTENCIA! ¡Si el archivo dado existe, esta función sobrescribirá su contenido sin preguntar!\n"
"\n"
"Ejemplos:\n"
"    >>> save_in_file (datos, \"foo.txt\")"

#. save_in_file.args
#, fuzzy
msgid "text, file, F"
msgstr "Texto, archivo, F"

#. pause.name
#, fuzzy
msgid "pause"
msgstr "pausa"

#. pause.doc
#, fuzzy
msgid "Stops execution until the user presses the <return> key."
msgstr "Detiene la ejecución hasta que el usuario presione la tecla <return>."

#. sleep.name
#, fuzzy
msgid "sleep"
msgstr "dormir"

#. sleep.doc
#, fuzzy
msgid ""
"sleep(seconds)\n"
"\n"
"Delay execution for a given number of seconds.  The argument may be\n"
"a floating point number for subsecond precision."
msgstr ""
"Dormir (segundos)\n"
"\n"
"Retrasar la ejecución por un número determinado de segundos. El argumento puede ser un número de coma flotante para la precisión del subconjunto."

#. exit
#, fuzzy
msgid "exit"
msgstr "salida"

#. integer.name
#, fuzzy
msgid "int"
msgstr "Int"

#. integer.doc
#, fuzzy
msgid ""
"int(x=0) -> integer\n"
"int(x, base=10) -> integer\n"
"\n"
"Convert a number or string to an integer, or return 0 if no arguments\n"
"are given.  If x is a number, return x.__int__().  For floating point\n"
"numbers, this truncates towards zero.\n"
"\n"
"If x is not a number or if base is given, then x must be a string,\n"
"bytes, or bytearray instance representing an integer literal in the\n"
"given base.  The literal can be preceded by '+' or '-' and be surrounded\n"
"by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n"
"Base 0 means to interpret the base from the string as an integer literal.\n"
">>> int('0b100', base=0)\n"
"4"
msgstr ""
"Int (x = 0) -> entero int (x, base = 10) -> entero\n"
"\n"
"Convierta un número o una cadena en un número entero, o devuelva 0 si no se proporcionan argumentos. Si x es un número, devuelve x .__ int __ (). Para números en coma flotante, esto trunca hacia cero.\n"
"\n"
"Si x no es un número o si se da base, entonces x debe ser una cadena, bytes o bytearray instancia que representa un literal entero en la base dada. El literal puede ser precedido por '+' o '-' y estar rodeado de espacios en blanco. La base predeterminada es 10. Las bases válidas son 0 y 2-36. Base 0 significa interpretar la base de la cadena como un literal entero. >>> int ('0b100', base = 0) 4"

#. integer:bit_length
#. boolean:bit_length
#, fuzzy
msgid "bit_length"
msgstr "Longitud de bit"

#. integer:conjugate
#. real:conjugate
#. complex:conjugate
#. boolean:conjugate
#, fuzzy
msgid "conjugate"
msgstr "conjugado"

#. integer:denominator
#. boolean:denominator
#, fuzzy
msgid "denominator"
msgstr "denominador"

#. integer:from_bytes
#. boolean:from_bytes
#, fuzzy
msgid "from_bytes"
msgstr "De_bytes"

#. integer:imag
#. real:imag
#. complex:imag
#. boolean:imag
#, fuzzy
msgid "imag"
msgstr "Imag"

#. integer:numerator
#. boolean:numerator
#, fuzzy
msgid "numerator"
msgstr "numerador"

#. integer:real
#. real:real
#. complex:real
#. boolean:real
#, fuzzy
msgid "real"
msgstr "real"

#. integer:to_bytes
#. boolean:to_bytes
#, fuzzy
msgid "to_bytes"
msgstr "A_bytes"

#. real.name
#, fuzzy
msgid "float"
msgstr "flotador"

#. real.doc
#, fuzzy
msgid ""
"float(x) -> floating point number\n"
"\n"
"Convert a string or number to a floating point number, if possible."
msgstr ""
"Float (x) -> número de punto flotante\n"
"\n"
"Convierta una cadena o número a un número de punto flotante, si es posible."

#. real:as_integer_ratio
#, fuzzy
msgid "as_integer_ratio"
msgstr "As_integer_ratio"

#. real:fromhex
#, fuzzy
msgid "fromhex"
msgstr "Desde el sexo"

#. real:hex
#. hexadecimal.name
#, fuzzy
msgid "hex"
msgstr "maleficio"

#. real:is_integer
#, fuzzy
msgid "is_integer"
msgstr "Es un entero"

#. complex.name
#, fuzzy
msgid "complex"
msgstr "complejo"

#. complex.doc
#, fuzzy
msgid ""
"complex(real[, imag]) -> complex number\n"
"\n"
"Create a complex number from a real part and an optional imaginary part.\n"
"This is equivalent to (real + imag*1j) where imag defaults to 0."
msgstr ""
"Complejo (real [, imag]) -> número complejo\n"
"\n"
"Cree un número complejo a partir de una parte real y una parte imaginaria opcional. Esto es equivalente a (real + imag * 1j) donde imag por defecto a 0."

#. boolean.name
#, fuzzy
msgid "bool"
msgstr "Bool"

#. boolean.doc
#. verdadeiro.doc
#. Verdadeiro.doc
#. falso.doc
#. Falso.doc
#, fuzzy
msgid ""
"bool(x) -> bool\n"
"\n"
"Returns True when the argument x is true, False otherwise.\n"
"The builtins True and False are the only two instances of the class bool.\n"
"The class bool is a subclass of the class int, and cannot be subclassed."
msgstr ""
"Bool (x) -> bool\n"
"\n"
"Devuelve True cuando el argumento x es verdadero, Falso en caso contrario. Las estructuras True y False son las dos únicas instancias de la clase bool. La clase bool es una subclase de la clase int, y no se puede subclasificar."

#. binary.name
#, fuzzy
msgid "bin"
msgstr "compartimiento"

#. binary.doc
#, fuzzy
msgid ""
"Return the binary representation of an integer.\n"
"\n"
">>> bin(2796202)\n"
"'0b1010101010101010101010'"
msgstr ""
"Devuelve la representación binaria de un entero.\n"
"\n"
">>> bin (2796202) '0b1010101010101010101010'"

#. octal.name
#, fuzzy
msgid "oct"
msgstr "oct"

#. octal.doc
#, fuzzy
msgid ""
"Return the octal representation of an integer.\n"
"\n"
">>> oct(342391)\n"
"'0o1234567'"
msgstr ""
"Devuelve la representación octal de un entero.\n"
"\n"
">>> oct (342391) '0o1234567'"

#. hexadecimal.doc
#, fuzzy
msgid ""
"Return the hexadecimal representation of an integer.\n"
"\n"
">>> hex(12648430)\n"
"'0xc0ffee'"
msgstr ""
"Devuelve la representación hexadecimal de un entero.\n"
"\n"
">>> hex (12648430) '0xc0ffee'"

#. character.name
#, fuzzy
msgid "chr"
msgstr "Chr"

#. character.doc
#, fuzzy
msgid ""
"Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff."
msgstr ""
"Devuelve una cadena Unicode de un carácter con ordinal i; 0 <= i <= "
"0x10ffff."

#. enumeration.name
#. enumerate.name
#. inverted.name
#, fuzzy
msgid "<lambda>"
msgstr "<Lambda>"

#. enumeration.args
#, fuzzy
msgid "x, start"
msgstr "X comienzo"

#. length.name
#, fuzzy
msgid "len"
msgstr "Len"

#. length.doc
#, fuzzy
msgid "Return the number of items in a container."
msgstr "Devuelve el número de elementos en un contenedor."

#. enumerate.args
#. inverted.args
#, fuzzy
msgid "x"
msgstr "x"

#. sorted.name
#, fuzzy
msgid "sorted"
msgstr "Clasificado"

#. sorted.doc
#, fuzzy
msgid ""
"Return a new list containing all items from the iterable in ascending order.\n"
"\n"
"A custom key function can be supplied to customize the sort order, and the\n"
"reverse flag can be set to request the result in descending order."
msgstr ""
"Devuelve una nueva lista que contiene todos los elementos de la iterable en orden ascendente.\n"
"\n"
"Se puede suministrar una función de tecla personalizada para personalizar el orden de clasificación y se puede configurar el indicador inverso para solicitar el resultado en orden descendente."

#. Dictionary.name
#, fuzzy
msgid "dict"
msgstr "Diccionarios_de_idiomas"

#. Dictionary.doc
#, fuzzy
msgid ""
"dict() -> new empty dictionary\n"
"dict(mapping) -> new dictionary initialized from a mapping object's\n"
"    (key, value) pairs\n"
"dict(iterable) -> new dictionary initialized as if via:\n"
"    d = {}\n"
"    for k, v in iterable:\n"
"        d[k] = v\n"
"dict(**kwargs) -> new dictionary initialized with the name=value pairs\n"
"    in the keyword argument list.  For example:  dict(one=1, two=2)"
msgstr ""
"Dict () -> nuevo diccionario vacío dict (mapping) -> nuevo diccionario inicializado desde un objeto de mapeo\n"
"    (Clave, valor) pairs dict (iterable) -> nuevo diccionario inicializado como si via:\n"
"    D\n"
"    Para k, v en iterable:\n"
"        D [k] = v dict (** kwargs) -> nuevo diccionario inicializado con el nombre = pares de valores\n"
"    En la lista de argumentos de palabras clave. Por ejemplo: dict (uno = 1, dos = 2)"

#. Dictionary:clear
#. List:clear
#, fuzzy
msgid "clear"
msgstr "claro"

#. Dictionary:copy
#. List:copy
#, fuzzy
msgid "copy"
msgstr "dupdo"

#. Dictionary:fromkeys
#, fuzzy
msgid "fromkeys"
msgstr "De las claves"

#. Dictionary:get
#, fuzzy
msgid "get"
msgstr "obtener"

#. Dictionary:items
#, fuzzy
msgid "items"
msgstr "artículos"

#. Dictionary:keys
#, fuzzy
msgid "keys"
msgstr "llaves"

#. Dictionary:pop
#. List:pop
#, fuzzy
msgid "pop"
msgstr "popular"

#. Dictionary:popitem
#, fuzzy
msgid "popitem"
msgstr "Popitem"

#. Dictionary:setdefault
#, fuzzy
msgid "setdefault"
msgstr "establecer predeterminado"

#. Dictionary:update
#, fuzzy
msgid "update"
msgstr "actualizar"

#. Dictionary:values
#, fuzzy
msgid "values"
msgstr "valores"

#. Tuple.name
#, fuzzy
msgid "tuple"
msgstr "Tupla"

#. Tuple.doc
#, fuzzy
msgid ""
"tuple() -> empty tuple\n"
"tuple(iterable) -> tuple initialized from iterable's items\n"
"\n"
"If the argument is a tuple, the return value is the same object."
msgstr ""
"Tupla () -> tupla vacía tupla (iterable) -> tupla inicializada de elementos iterables\n"
"\n"
"Si el argumento es una tupla, el valor de retorno es el mismo objeto."

#. Tuple:count
#. List:count
#. String:count
#, fuzzy
msgid "count"
msgstr "contar"

#. Tuple:index
#. List:index
#. String:index
#, fuzzy
msgid "index"
msgstr "índice"

#. List.name
#, fuzzy
msgid "list"
msgstr "lista"

#. List.doc
#, fuzzy
msgid ""
"list() -> new empty list\n"
"list(iterable) -> new list initialized from iterable's items"
msgstr ""
"List () -> nueva lista de lista vacía (iterable) -> nueva lista inicializada"
" de iterable's items"

#. List:append
#, fuzzy
msgid "append"
msgstr "adjuntar"

#. List:extend
#, fuzzy
msgid "extend"
msgstr "ampliar"

#. List:insert
#, fuzzy
msgid "insert"
msgstr "insertar"

#. List:remove
#, fuzzy
msgid "remove"
msgstr "retirar"

#. List:reverse
#, fuzzy
msgid "reverse"
msgstr "marcha atrás"

#. List:sort
#, fuzzy
msgid "sort"
msgstr "ordenar"

#. String.name
#, fuzzy
msgid "str"
msgstr "Str"

#. String.doc
#, fuzzy
msgid ""
"str(object='') -> str\n"
"str(bytes_or_buffer[, encoding[, errors]]) -> str\n"
"\n"
"Create a new string object from the given object. If encoding or\n"
"errors is specified, then the object must expose a data buffer\n"
"that will be decoded using the given encoding and error handler.\n"
"Otherwise, returns the result of object.__str__() (if defined)\n"
"or repr(object).\n"
"encoding defaults to sys.getdefaultencoding().\n"
"errors defaults to 'strict'."
msgstr ""
"Str (object = '') -> str str (bytes_or_buffer [, codificación [, errores]]) -> str\n"
"\n"
"Cree un nuevo objeto de cadena del objeto dado. Si se especifica la codificación o los errores, el objeto debe exponer un búfer de datos que se decodificará utilizando la codificación y el controlador de errores dados. De lo contrario, devuelve el resultado del objeto .__ str __ () (si está definido) o repr (object). La codificación predeterminada es sys.getdefaultencoding (). Los errores predeterminados son 'estrictos'."

#. String:capitalize
#, fuzzy
msgid "capitalize"
msgstr "capitalizar"

#. String:casefold
#, fuzzy
msgid "casefold"
msgstr "Maletín"

#. String:center
#, fuzzy
msgid "center"
msgstr "centrar"

#. String:encode
#, fuzzy
msgid "encode"
msgstr "codificar"

#. String:endswith
#, fuzzy
msgid "endswith"
msgstr "termina con"

#. String:expandtabs
#, fuzzy
msgid "expandtabs"
msgstr "Ampliar las tablas"

#. String:find
#, fuzzy
msgid "find"
msgstr "encontrar"

#. String:format
#, fuzzy
msgid "format"
msgstr "formato"

#. String:format_map
#, fuzzy
msgid "format_map"
msgstr "Format_map"

#. String:isalnum
#, fuzzy
msgid "isalnum"
msgstr "Isnum"

#. String:isalpha
#, fuzzy
msgid "isalpha"
msgstr "Isalpha"

#. String:isdecimal
#, fuzzy
msgid "isdecimal"
msgstr "Isdecimal"

#. String:isdigit
#, fuzzy
msgid "isdigit"
msgstr "Es un dígito"

#. String:isidentifier
#, fuzzy
msgid "isidentifier"
msgstr "Isidentifier"

#. String:islower
#, fuzzy
msgid "islower"
msgstr "es bajo"

#. String:isnumeric
#, fuzzy
msgid "isnumeric"
msgstr "Isnumeric"

#. String:isprintable
#, fuzzy
msgid "isprintable"
msgstr "Es imprimible"

#. String:isspace
#, fuzzy
msgid "isspace"
msgstr "Isspace"

#. String:istitle
#, fuzzy
msgid "istitle"
msgstr "Es el título"

#. String:isupper
#, fuzzy
msgid "isupper"
msgstr "Es mejor"

#. String:ljust
#, fuzzy
msgid "ljust"
msgstr "Solo"

#. String:lower
#, fuzzy
msgid "lower"
msgstr "inferior"

#. String:lstrip
#, fuzzy
msgid "lstrip"
msgstr "Lstrip"

#. String:maketrans
#, fuzzy
msgid "maketrans"
msgstr "Maketrans"

#. String:partition
#, fuzzy
msgid "partition"
msgstr "dividir"

#. String:replace
#, fuzzy
msgid "replace"
msgstr "reemplazar"

#. String:rfind
#, fuzzy
msgid "rfind"
msgstr "Rfind"

#. String:rindex
#, fuzzy
msgid "rindex"
msgstr "Rindex"

#. String:rjust
#, fuzzy
msgid "rjust"
msgstr "Justo"

#. String:rpartition
#, fuzzy
msgid "rpartition"
msgstr "Partición"

#. String:rsplit
#, fuzzy
msgid "rsplit"
msgstr "Rsplit"

#. String:rstrip
#, fuzzy
msgid "rstrip"
msgstr "Rstrip"

#. String:split
#, fuzzy
msgid "split"
msgstr "división"

#. String:splitlines
#, fuzzy
msgid "splitlines"
msgstr "Líneas de división"

#. String:startswith
#, fuzzy
msgid "startswith"
msgstr "comienza con"

#. String:strip
#, fuzzy
msgid "strip"
msgstr "tira"

#. String:swapcase
#, fuzzy
msgid "swapcase"
msgstr "Intercambiar"

#. String:title
#, fuzzy
msgid "title"
msgstr "título"

#. String:translate
#, fuzzy
msgid "translate"
msgstr "traducir"

#. String:upper
#, fuzzy
msgid "upper"
msgstr "Superior"

#. String:zfill
#, fuzzy
msgid "zfill"
msgstr "Zfill"

#. type.name
#, fuzzy
msgid "type"
msgstr "tipo"

#. type.doc
#, fuzzy
msgid ""
"type(object_or_name, bases, dict)\n"
"type(object) -> the object's type\n"
"type(name, bases, dict) -> a new type"
msgstr ""
"Type (object_or_name, bases, dict) tipo (objeto) -> tipo de objeto (nombre, "
"bases, dict) -> un nuevo tipo"

#. type:mro
#, fuzzy
msgid "mro"
msgstr "Mro"

#. help.doc
#, fuzzy
msgid ""
"Define the builtin 'help'.\n"
"\n"
"This is a wrapper around pydoc.help that provides a helpful message\n"
"when 'help' is typed at the Python interactive prompt.\n"
"\n"
"Calling help() at the Python prompt starts an interactive help session.\n"
"Calling help(thing) prints help for the python object 'thing'."
msgstr ""
"Defina la \"ayuda\" integrada.\n"
"\n"
"Este es un contenedor alrededor de pydoc.help que proporciona un mensaje útil cuando se escribe \"ayuda\" en el indicador interactivo de Python.\n"
"\n"
"Llamar help () en el indicador de Python inicia una sesión de ayuda interactiva. Llamar ayuda (cosa) imprime ayuda para el objeto 'thing' de python."

#. nulo
#, fuzzy
msgid "nulo"
msgstr "Nulo"

#. Nulo
#, fuzzy
msgid "Nulo"
msgstr "Nulo"
