#
msgid ""
msgstr ""
"Project-Id-Version: 1.0\n"
"Report-Msgid-Bugs-To: fabiomacedomendes@gmail.com\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. range.name
msgid "range"
msgstr ""

#. range.doc
msgid ""
"range(stop) -> range object\n"
"range(start, stop[, step]) -> range object\n"
"\n"
"Return an object that produces a sequence of integers from start (inclusive)\n"
"to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.\n"
"start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.\n"
"These are exactly the valid indices for a list of 4 elements.\n"
"When step is given, it specifies the increment (or decrement)."
msgstr ""

#. range.args
#. concatenate.args
msgid "args"
msgstr ""

#. sleep.name
msgid "sleep"
msgstr ""

#. sleep.doc
msgid ""
"sleep(seconds)\n"
"\n"
"Delay execution for a given number of seconds.  The argument may be\n"
"a floating point number for subsecond precision."
msgstr ""

#. exit.name
msgid "exit"
msgstr ""

#. exit.doc
msgid "Finish program execution."
msgstr ""

#. exit.args
msgid "msg"
msgstr ""

#. concatenate.name
msgid "concatenate"
msgstr ""

#. concatenate.doc
msgid ""
"Convert argument to string and concatenate.\n"
"\n"
"If only one argument is passed, assumes it is a sequence.\n"
"\n"
"Examples:\n"
"    >>> concatenate('x = ', 2)\n"
"    'x = 2'\n"
"    >>> concatenate([1, 2, 3, 4])\n"
"    '1234'"
msgstr ""

#. join.name
msgid "join"
msgstr ""

#. join.doc
msgid ""
"Similar to concatenate(), but takes an extra separator as first argument\n"
"argument.\n"
"\n"
"Examples:\n"
"    >>> join(', ', 1, 2, 3)\n"
"    '1, 2, 3'"
msgstr ""

#. join.args
msgid "separator, args"
msgstr ""

#. format_string.name
msgid "format_string"
msgstr ""

#. format_string.doc
msgid ""
"Format text inserting parameters in the wildcard positions.\n"
"\n"
"There are two different syntax for string formatting. The first is based\n"
"on C and uses symbols such as %s, %f, %d to delimit insertion points.\n"
"\n"
">>> format_string('%i != %.2f', 42, 43)\n"
"'42 != 43.00'\n"
"\n"
"The second uses curly braces.\n"
"\n"
">>> format_string('{0} != {1}', 42, 43)\n"
"'42 != 43'"
msgstr ""

#. format_string.args
msgid "string, args, kwargs"
msgstr ""

#. print.name
msgid "print"
msgstr ""

#. print.doc
msgid ""
"Prints the object or text provided on the screen.\n"
"\n"
"If called with multiple arguments, prints them in sequence, separating\n"
"them with a white space.\n"
"\n"
"Examples:\n"
"    >>> print(\"Hello world!\")\n"
"    Hello World!"
msgstr ""

#. print.args
#. alert.args
msgid "args, kwargs"
msgstr ""

#. alert.name
msgid "alert"
msgstr ""

#. alert.doc
msgid ""
"Similar to the `show` function, but displays the resulting message in a\n"
"dialog box."
msgstr ""

#. print_formatted.name
msgid "print_formatted"
msgstr ""

#. print_formatted.doc
msgid "Displays a string after applying the provided formatting arguments."
msgstr ""

#. print_formatted.args
msgid "text, args, kwargs"
msgstr ""

#. read_text.name
msgid "read_text"
msgstr ""

#. read_text.doc
msgid ""
"Prompts the user for a text entry.\n"
"\n"
"Examples:\n"
"    >>> name = read_text('Your name:')\n"
"    >>> show(\"Hello,\" + name)  # the user types \"Maria\"\n"
"    Hello Maria"
msgstr ""

#. read_text.args
msgid "message"
msgstr ""

#. read_number.name
msgid "read_number"
msgstr ""

#. read_number.doc
msgid ""
"Prompts the user for a numeric entry.\n"
"\n"
"Examples:\n"
"    >>> x = read_number('A number:')  # user types 2...\n"
"    >>> x + 40\n"
"    42"
msgstr ""

#. read_number.args
msgid "message, text, num"
msgstr ""

#. read_file.name
msgid "read_file"
msgstr ""

#. read_file.doc
msgid ""
"Reads the content from a text file and returns it as string.\n"
"\n"
"Examples:\n"
"    >>> data = read_file(\"foo.txt\")"
msgstr ""

#. read_file.args
msgid "file"
msgstr ""

#. save_in_file.name
msgid "save_in_file"
msgstr ""

#. save_in_file.doc
msgid ""
"Saves the text content to the indicated file, deleting any previous content.\n"
"\n"
"WARNING! If the given file exists, this function will overwrite your\n"
"content without asking!\n"
"\n"
"Examples:\n"
"    >>> save_in_file(data, \"foo.txt\")"
msgstr ""

#. save_in_file.args
msgid "text, file, F"
msgstr ""

#. pause.name
msgid "pause"
msgstr ""

#. pause.doc
msgid "Stops execution until the user presses the <return> key."
msgstr ""

#. Turtle.name
msgid "Turtle"
msgstr ""

#. Turtle.doc
msgid ""
"Turtle representation on client.\n"
"\n"
"Client knows the pos, heading, avatar and a dictionary of arbitrary meta\n"
"values. The client holds a reference to a connection and each method simply\n"
"sends messages through this connection object."
msgstr ""

#. Turtle:back.name
#. Turtle:backward.name
#. Turtle:bk.name
#. backward.name
msgid "backward"
msgstr ""

#. Turtle:back.doc
#. Turtle:backward.doc
#. Turtle:bk.doc
#. backward.doc
msgid ""
"Move the turtle backward by the given step size (in pixels).\n"
"\n"
"Aliases: backward | back | bk"
msgstr ""

#. Turtle:back.args
#. Turtle:backward.args
#. Turtle:bk.args
#. Turtle:fd.args
#. Turtle:forward.args
msgid "self, step"
msgstr ""

#. Turtle:clear.name
#. clear.name
msgid "clear"
msgstr ""

#. Turtle:clear.doc
#. clear.doc
msgid "Clear all drawings made by turtle."
msgstr ""

#. Turtle:clear.args
#. Turtle:getavatar.args
#. Turtle:getcolor.args
#. Turtle:getfillcolor.args
#. Turtle:getheading.args
#. Turtle:getpos.args
#. Turtle:getwidth.args
#. Turtle:hide.args
#. Turtle:isdown.args
#. Turtle:ishidden.args
#. Turtle:isvisible.args
#. Turtle:pd.args
#. Turtle:pendown.args
#. Turtle:penup.args
#. Turtle:pu.args
#. Turtle:reset.args
#. Turtle:show.args
#. Vec:norm.args
#. Vec:normalized.args
msgid "self"
msgstr ""

#. Turtle:color
msgid "color"
msgstr ""

#. Turtle:drawing
msgid "drawing"
msgstr ""

#. Turtle:fd.name
#. Turtle:forward.name
#. forward.name
msgid "forward"
msgstr ""

#. Turtle:fd.doc
#. Turtle:forward.doc
#. forward.doc
msgid ""
"Move the turtle forward by the given step size (in pixels).\n"
"\n"
"Aliases: forward | fd"
msgstr ""

#. Turtle:fillcolor
msgid "fillcolor"
msgstr ""

#. Turtle:getavatar.name
#. getavatar.name
msgid "getavatar"
msgstr ""

#. Turtle:getavatar.doc
#. getavatar.doc
msgid "Return a string with the name of the current avatar."
msgstr ""

#. Turtle:getcolor.name
#. getcolor.name
msgid "getcolor"
msgstr ""

#. Turtle:getcolor.doc
#. getcolor.doc
msgid "Return a tuple of (R, G, B) with the current pen color."
msgstr ""

#. Turtle:getfillcolor.name
#. getfillcolor.name
msgid "getfillcolor"
msgstr ""

#. Turtle:getfillcolor.doc
#. getfillcolor.doc
msgid "Return a tuple of (R, G, B) with the current fill color."
msgstr ""

#. Turtle:getheading.name
#. getheading.name
msgid "getheading"
msgstr ""

#. Turtle:getheading.doc
#. getheading.doc
msgid "Return current heading of the turtle (in degrees)."
msgstr ""

#. Turtle:getpos.name
#. getpos.name
msgid "getpos"
msgstr ""

#. Turtle:getpos.doc
#. getpos.doc
msgid "Return a vector (x, y) with turtle's position (in pixels)."
msgstr ""

#. Turtle:getwidth.name
#. getwidth.name
msgid "getwidth"
msgstr ""

#. Turtle:getwidth.doc
#. getwidth.doc
msgid "Return the pen width (in pixels):"
msgstr ""

#. Turtle:goto.name
#. goto.name
msgid "goto"
msgstr ""

#. Turtle:goto.doc
#. goto.doc
msgid ""
"Goes to the given position.\n"
"\n"
"If the pen is down, it draws a line."
msgstr ""

#. Turtle:goto.args
#. Turtle:jump.args
#. Turtle:setpos.args
msgid "self, x, y, kwds"
msgstr ""

#. Turtle:heading
msgid "heading"
msgstr ""

#. Turtle:hidden
msgid "hidden"
msgstr ""

#. Turtle:hide.name
#. hide.name
msgid "hide"
msgstr ""

#. Turtle:hide.doc
#. hide.doc
msgid "Hide turtle."
msgstr ""

#. Turtle:isdown.name
#. isdown.name
msgid "isdown"
msgstr ""

#. Turtle:isdown.doc
#. isdown.doc
msgid "Return True if the pen is down or False otherwise."
msgstr ""

#. Turtle:ishidden.name
#. ishidden.name
msgid "ishidden"
msgstr ""

#. Turtle:ishidden.doc
#. ishidden.doc
msgid "Return True if the turtle is not visible."
msgstr ""

#. Turtle:isvisible.name
#. isvisible.name
msgid "isvisible"
msgstr ""

#. Turtle:isvisible.doc
#. isvisible.doc
msgid "Return True if the turtle is visible."
msgstr ""

#. Turtle:jump.name
#. jump.name
msgid "jump"
msgstr ""

#. Turtle:jump.doc
#. jump.doc
msgid ""
"Relative movement by the desired position. It *never* draw as line even\n"
"if the pen is down."
msgstr ""

#. Turtle:left.name
#. Turtle:lt.name
#. left.name
msgid "left"
msgstr ""

#. Turtle:left.doc
#. Turtle:lt.doc
#. left.doc
msgid ""
"Rotate the turtle counter-clockwise by the given angle.\n"
"\n"
"Aliases: left | lt\n"
"\n"
"Negative angles produces clockwise rotation."
msgstr ""

#. Turtle:left.args
#. Turtle:lt.args
#. Turtle:right.args
#. Turtle:rt.args
msgid "self, angle"
msgstr ""

#. Turtle:pd.name
#. Turtle:pendown.name
#. pendown.name
msgid "pendown"
msgstr ""

#. Turtle:pd.doc
#. Turtle:pendown.doc
#. pendown.doc
msgid ""
"Lower the turtle pen so it can draw in the screen.\n"
"\n"
"Aliases: pendown | pd"
msgstr ""

#. Turtle:penup.name
#. Turtle:pu.name
#. penup.name
msgid "penup"
msgstr ""

#. Turtle:penup.doc
#. Turtle:pu.doc
#. penup.doc
msgid ""
"Raises the turtle pen so it stops drawing.\n"
"\n"
"Aliases: penup | pu"
msgstr ""

#. Turtle:pos
msgid "pos"
msgstr ""

#. Turtle:reset.name
#. reset.name
msgid "reset"
msgstr ""

#. Turtle:reset.doc
#. reset.doc
msgid "Clear all drawings and reset turtle to initial position."
msgstr ""

#. Turtle:right.name
#. Turtle:rt.name
#. right.name
msgid "right"
msgstr ""

#. Turtle:right.doc
#. Turtle:rt.doc
#. right.doc
msgid ""
"Rotate the turtle clockwise by the given angle.\n"
"\n"
"Aliases: right | rt\n"
"\n"
"Negative angles produces counter-clockwise rotation. Return final\n"
"heading."
msgstr ""

#. Turtle:setavatar.name
#. setavatar.name
msgid "setavatar"
msgstr ""

#. Turtle:setavatar.doc
#. setavatar.doc
msgid "Modifies the turtle avatar."
msgstr ""

#. Turtle:setavatar.args
#. Turtle:setcolor.args
#. Turtle:setfillcolor.args
#. Turtle:setheading.args
#. Turtle:setwidth.args
msgid "self, value"
msgstr ""

#. Turtle:setcolor.name
#. setcolor.name
msgid "setcolor"
msgstr ""

#. Turtle:setcolor.doc
#. setcolor.doc
msgid ""
"Modifies the pen color.\n"
"\n"
"Color can be specified as an (R, G, B) tuple or as a hex string or by\n"
"name."
msgstr ""

#. Turtle:setfillcolor.name
#. setfillcolor.name
msgid "setfillcolor"
msgstr ""

#. Turtle:setfillcolor.doc
#. setfillcolor.doc
msgid ""
"Modifies the fill color.\n"
"\n"
"Color can be specified as an (R, G, B) tuple or as a hex string or by\n"
"name."
msgstr ""

#. Turtle:setheading.name
#. setheading.name
msgid "setheading"
msgstr ""

#. Turtle:setheading.doc
#. setheading.doc
msgid "Sets turtle's heading (in degrees)."
msgstr ""

#. Turtle:setpos.name
#. setpos.name
msgid "setpos"
msgstr ""

#. Turtle:setpos.doc
#. setpos.doc
msgid ""
"Modifies turtle's position (in pixels)\n"
"\n"
"User can pass the x, y coordinates of the new position or a tuple of\n"
"(x, y) values. This method never draws a line."
msgstr ""

#. Turtle:setwidth.name
#. setwidth.name
msgid "setwidth"
msgstr ""

#. Turtle:setwidth.doc
#. setwidth.doc
msgid "Modifies the pen width (in pixels)"
msgstr ""

#. Turtle:show.name
#. show.name
msgid "show"
msgstr ""

#. Turtle:show.doc
#. show.doc
msgid "Shows a hidden turtle."
msgstr ""

#. Turtle:width
msgid "width"
msgstr ""

#. mainturtle.name
msgid "mainturtle"
msgstr ""

#. mainturtle.doc
msgid "Returns the main turtle object."
msgstr ""

#. getpos.args
#. setpos.args
#. getheading.args
#. setheading.args
#. getwidth.args
#. setwidth.args
#. getcolor.args
#. setcolor.args
#. getfillcolor.args
#. setfillcolor.args
#. getavatar.args
#. setavatar.args
#. penup.args
#. pendown.args
#. isdown.args
#. isvisible.args
#. ishidden.args
#. hide.args
#. show.args
#. clear.args
#. reset.args
#. goto.args
#. jump.args
#. forward.args
#. backward.args
#. left.args
#. right.args
msgid "args, kwargs, turtle"
msgstr ""

#. cos.name
msgid "cos"
msgstr ""

#. cos.doc
msgid "Cosine of an angle (in degrees)"
msgstr ""

#. cos.args
#. sin.args
#. tan.args
msgid "angle"
msgstr ""

#. sin.name
msgid "sin"
msgstr ""

#. sin.doc
msgid "Sine of an angle (in degrees)"
msgstr ""

#. tan.name
msgid "tan"
msgstr ""

#. tan.doc
msgid "Tangent of an angle (in degrees)"
msgstr ""

#. sqrt.name
msgid "sqrt"
msgstr ""

#. sqrt.doc
msgid ""
"sqrt(x)\n"
"\n"
"Return the square root of x."
msgstr ""

#. exp.name
msgid "exp"
msgstr ""

#. exp.doc
msgid ""
"exp(x)\n"
"\n"
"Return e raised to the power of x."
msgstr ""

#. log.name
#. ln.name
msgid "log"
msgstr ""

#. log.doc
#. ln.doc
msgid ""
"log(x[, base])\n"
"\n"
"Return the logarithm of x to the given base.\n"
"If the base not specified, returns the natural logarithm (base e) of x."
msgstr ""

#. log10.name
msgid "log10"
msgstr ""

#. log10.doc
msgid ""
"log10(x)\n"
"\n"
"Return the base 10 logarithm of x."
msgstr ""

#. log2.name
msgid "log2"
msgstr ""

#. log2.doc
msgid ""
"log2(x)\n"
"\n"
"Return the base 2 logarithm of x."
msgstr ""

#. max.name
msgid "max"
msgstr ""

#. max.doc
msgid ""
"max(iterable, *[, default=obj, key=func]) -> value\n"
"max(arg1, arg2, *args, *[, key=func]) -> value\n"
"\n"
"With a single iterable argument, return its biggest item. The\n"
"default keyword-only argument specifies an object to return if\n"
"the provided iterable is empty.\n"
"With two or more arguments, return the largest argument."
msgstr ""

#. min.name
msgid "min"
msgstr ""

#. min.doc
msgid ""
"min(iterable, *[, default=obj, key=func]) -> value\n"
"min(arg1, arg2, *args, *[, key=func]) -> value\n"
"\n"
"With a single iterable argument, return its smallest item. The\n"
"default keyword-only argument specifies an object to return if\n"
"the provided iterable is empty.\n"
"With two or more arguments, return the smallest argument."
msgstr ""

#. sum.name
msgid "sum"
msgstr ""

#. sum.doc
msgid ""
"Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n"
"\n"
"When the iterable is empty, return the start value.\n"
"This function is intended specifically for use with numeric values and may\n"
"reject non-numeric types."
msgstr ""

#. product.name
msgid "product"
msgstr ""

#. product.doc
msgid "Return the product of all numbers in the sequence."
msgstr ""

#. product.args
msgid "seq, start, result, x"
msgstr ""

#. abs.name
msgid "abs"
msgstr ""

#. abs.doc
msgid "Return the absolute value of the argument."
msgstr ""

#. round.name
msgid "round"
msgstr ""

#. round.doc
msgid ""
"round(number[, ndigits]) -> number\n"
"\n"
"Round a number to a given precision in decimal digits (default 0 digits).\n"
"This returns an int when called with one argument, otherwise the\n"
"same type as the number. ndigits may be negative."
msgstr ""

#. ceil.name
msgid "ceil"
msgstr ""

#. ceil.doc
msgid ""
"ceil(x)\n"
"\n"
"Return the ceiling of x as an Integral.\n"
"This is the smallest integer >= x."
msgstr ""

#. trunc.name
msgid "trunc"
msgstr ""

#. trunc.doc
msgid ""
"trunc(x:Real) -> Integral\n"
"\n"
"Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method."
msgstr ""

#. random.name
msgid "random"
msgstr ""

#. random.doc
msgid "random() -> x in the interval [0, 1)."
msgstr ""

#. randint.name
msgid "randint"
msgstr ""

#. randint.doc
msgid "Return random integer in range [a, b], including both end points."
msgstr ""

#. vec.name
msgid "vec"
msgstr ""

#. vec.doc
msgid "Return a vector with the given (x, y) components."
msgstr ""

#. vec.args
msgid "x, y"
msgstr ""

#. dot.name
msgid "dot"
msgstr ""

#. dot.doc
msgid "The dot product (scalar product) of two vectors."
msgstr ""

#. dot.args
msgid "u, v"
msgstr ""

#. Vec.name
msgid "Vec"
msgstr ""

#. Vec.doc
msgid ""
"A tuple-based 2D vector.\n"
"\n"
"Supports all basic arithmetic operations."
msgstr ""

#. Vec:count
msgid "count"
msgstr ""

#. Vec:from_angle
msgid "from_angle"
msgstr ""

#. Vec:index
msgid "index"
msgstr ""

#. Vec:norm.name
msgid "norm"
msgstr ""

#. Vec:norm.doc
msgid "Vector norm."
msgstr ""

#. Vec:normalized.name
msgid "normalized"
msgstr ""

#. Vec:normalized.doc
msgid "Return unity vector."
msgstr ""

#. Vec:perp.name
msgid "perp"
msgstr ""

#. Vec:perp.doc
msgid "Returns a perpendicular vector rotated 90 degrees counter clockwise."
msgstr ""

#. Vec:perp.args
msgid "self, invert"
msgstr ""

#. Vec:rotate.name
msgid "rotate"
msgstr ""

#. Vec:rotate.doc
msgid "Return rotated vector by the given angle."
msgstr ""

#. Vec:rotate.args
msgid "self, theta, x, y, c, s"
msgstr ""

#. Vec:x
msgid "x"
msgstr ""

#. Vec:y
msgid "y"
msgstr ""

#. pi.doc
#. e.doc
msgid ""
"float(x) -> floating point number\n"
"\n"
"Convert a string or number to a floating point number, if possible."
msgstr ""

#. exiter.name
msgid "quit"
msgstr ""

#. exiter.doc
msgid "Type quit() to leave."
msgstr ""

#. cls.name
msgid "cls"
msgstr ""

#. cls.doc
msgid "Clear screen"
msgstr ""
